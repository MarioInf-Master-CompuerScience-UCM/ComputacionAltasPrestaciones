Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] prime.c(27,1)
  -> INLINE: (38,7) atoi(const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at prime.c(57,4)
remark #16206: OpenMP multithreaded code generation for CRITICAL was successful
OpenMP Construct at prime.c(45,2)
remark #16204: OpenMP multithreaded code generation for SINGLE was successful
OpenMP Construct at prime.c(44,2)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at prime.c(45,2)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at prime.c(45,2)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

      LOOP BEGIN at prime.c(50,3)
         remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

prime.c(27,1):remark #34051: REGISTER ALLOCATION : [main] prime.c:27

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     236
            Global    :      45
            Local     :     191
        Regenerable   :     116
        Spilled       :       5
        
    Routine stack
        Variables     :      60 bytes*
            Reads     :      11 [2.81e+00 ~ 2.8%]
            Writes    :      13 [8.40e+00 ~ 8.4%]
        Spills        :      80 bytes*
            Reads     :      22 [3.74e+00 ~ 3.7%]
            Writes    :      20 [3.72e+00 ~ 3.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: bubble_sort(int *, long)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (bubble_sort(int *, long)) [3] prime.c(6,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at prime.c(9,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at prime.c(11,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between list[d] (18:9) and list[d+1] (19:9)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at prime.c(11,5)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

prime.c(6,1):remark #34051: REGISTER ALLOCATION : [bubble_sort] prime.c:6

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      24
            Global    :      21
            Local     :       3
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
